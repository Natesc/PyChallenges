import requests
import re
from decimal import Decimal
from bs4 import BeautifulSoup
from fractions import Fraction


def main(url, scale):
    try:
        page = requests.get(url)
    except Exception as e:
        return e

    soup = BeautifulSoup(page.content, 'html.parser')

    # list containing all of the ingredients.
    container = soup.findAll(attrs={"ng-hide": "reloaded"})

    # Get the text for each ingredient in the ingredient list.
    ingredients = [container[i].get_text() for i in range(0, len(container))]

    # Remove the excess newlines between ingredients.
    parsed_ingredients = ""
    for i in ingredients:
        parsed_ingredients += re.sub(r'\n+', '\n', i)

    # Combine the separate sections of the ingredient list.
    lst = parsed_ingredients.split('\n')
    ingredients = [i for i in lst if len(i) >= 1]

    # Remove the note at the end of the ingredients
    ingredients.pop(-1)

    # Define the original ingredients.
    original_ingredients = '\n'.join(ingredients)

    # Find the yield
    amount = soup.find(id="metaRecipeServings")
    original_amount = amount.get("content")

    # Find Name
    name = soup.find(id="recipe-main-content")
    recipe_name = name.get_text()

    # Print out the original recipe
    if int(scale) == 1:
        return ("-----\nRecipe Name: " + recipe_name + "\n"
                "Yield: " + str(original_amount) + "\n-----\n"
                "Ingredients:\n\n" + original_ingredients + "\n")
    else:
        # Store the (nums ounces) in a list of strings.
        ounces = re.findall(r'\(\d+\s\w+\)|\(\d+\.\d+\s\w+\)', original_ingredients)
        # Strip the amount from each ingredient and return a list of them.
        numstring = re.sub(r'[a-zA-Z-,®™.]|\(\d+\s\w+\)|\(\d+\.\d+\s\w+\)', '', original_ingredients)
        numlst = [i.strip(' ') for i in numstring.split('\n')]

        # Do math
        scaled_lst = []

        for i in numlst:
            if len(i) <= 0:
                numlst.pop(numlst.index(i))
        for index, i in enumerate(numlst):
            # if its a third do complicated math...
            if i.endswith("/3") and " " not in i:
                numerator = int(i[-3])
                denominator = int(i[-1])
                x = Decimal(numerator) / Decimal(denominator)
                x = float(x)*scale
                x = str(x)

                final_fraction = int(x[0])
                if final_fraction > 0:
                    if x[2] == "3":
                        final_fraction = str(final_fraction) + " 1/3"
                    elif x[2] == "6":
                        final_fraction = str(final_fraction) + " 2/3"
                    else:
                        final_fraction += 1
                else:
                    if x[2] == "3":
                        final_fraction = "1/3"
                    elif x[2] == "6":
                        final_fraction = "2/3"
                    else:
                        final_fraction += 1
                scaled_lst.append(final_fraction)

            elif " " not in i:
                floaters = Fraction(i) * scale
                scaled_lst.append(str(Fraction(floaters)))

            else:
                whole = i[0]
                fract = i[2::]

                whole = int(int(whole) * scale)
                fract = Fraction(fract) * scale
                if len(str(whole) + " " + str(Fraction(fract))) > 3:
                    scaled_lst.append(str(whole) + " " + str(Fraction(fract)))
                else:
                    whole = whole + int(Fraction(fract))
                    scaled_lst.append(whole)

        # Remove faults such as 0 1/4 teaspoon or 2 3 cups of flour.
        for i in scaled_lst:
            i = str(i)
            if i[0] == "0":
                scaled_lst[scaled_lst.index(i)] = i[2:]

            # Match to any digits not ending in fractions
            whole_num_lst = (re.findall(r'\d+\s\d+$', i))
            for nums in whole_num_lst:
                if nums:
                    lst = nums.split(" ")
                    lst = [int(i) for i in lst]
                    scaled_lst[scaled_lst.index(i)] = str(sum(lst))

        # Remove the previous amounts from the original ingredients list and turn it into a list.
        new_ingredients = re.sub(r'[0-9/]|\(\d+\s\w+\)|\(\d+\.\d+\s\w+\)', '', original_ingredients)
        ingredients_lst = [i.strip(' ') for i in new_ingredients.split('\n')]

        # Join the 2 lists (ingredients + (ounces) + amounts)
        original_ingredients_lst = original_ingredients.split("\n")

        indices = []
        for index, i in enumerate(original_ingredients_lst):
            for z in ounces:
                if z in i:
                    indices.append(index)

        final_scaled_lst = []
        for index, i in enumerate(scaled_lst):
            if index in indices:
                new_index = indices.index(index)
                final_scaled_lst.append(str(i) + " " + ounces[new_index] + " " + ingredients_lst[index])
            else:
                final_scaled_lst.append(str(i) + " " + ingredients_lst[index])

        # Create a string of the list separated by a newline.
        final_scaled_lst = '\n'.join(final_scaled_lst)
        # Find the scaled yield
        scaled_amount = int(int(original_amount)*scale)
        # print out the scaled results
        return ("-----\nRecipe Name: " + recipe_name + "\n"
                "Scaled Yield: " + str(scaled_amount) + "\n-----\n"
                "Scaled Ingredients:\n\n" + final_scaled_lst)
